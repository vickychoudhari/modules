<?php

/**
 * @file
 * Contains storage.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field_ui\FieldUI;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function storage_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the storage module.
    case 'help.page.storage':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function storage_theme() {
  $theme = [];
  $theme['storage'] = [
    'render element' => 'elements',
    'file' => 'storage.page.inc',
    'template' => 'storage',
  ];
  $theme['storage_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'storage.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function storage_theme_suggestions_storage(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#storage'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'storage__' . $sanitized_view_mode;
  $suggestions[] = 'storage__' . $entity->bundle();
  $suggestions[] = 'storage__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'storage__' . $entity->id();
  $suggestions[] = 'storage__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a button 'Save and manage fields' to the 'Create storage type' form.
 *
 * @see \Drupal\node\NodeTypeForm
 * @see field_ui_form_node_type_form_submit()
 */
function storage_form_storage_type_add_form_alter(&$form, FormStateInterface $form_state) {
  // We want to display the button only on add page.
  if ($form_state->getFormObject()->getEntity()->isNew()) {
    $form['actions']['save_continue'] = $form['actions']['submit'];
    $form['actions']['save_continue']['#value'] = t('Save and manage fields');
    $form['actions']['save_continue']['#weight'] = $form['actions']['save_continue']['#weight'] + 5;
    $form['actions']['save_continue']['#submit'][] = 'storage_form_storage_type_add_form_submit';
    // Hide the 'Save content type' button.
    $form['actions']['submit']['#access'] = FALSE;
  }
}

/**
 * Form submission handler for the 'Save and manage fields' button.
 *
 * @see storage_form_storage_type_add_form_alter()
 */
function storage_form_storage_type_add_form_submit($form, FormStateInterface $form_state) {
  if ($form_state->getTriggeringElement()['#parents'][0] === 'save_continue' && $route_info = FieldUI::getOverviewRouteInfo('storage', $form_state->getValue('id'))) {
    $form_state->setRedirectUrl($route_info);
  }
}

/**
 * Implements hook_views_query_substitutions().
 */
function storage_views_query_substitutions(ViewExecutable $view) {
  $account = \Drupal::currentUser();
  return [
    '***VIEW_OWN_UNPUBLISHED_STORAGE***' => (int) $account->hasPermission('view own unpublished storage entities'),
    '***ADMINISTER_STORAGE_ENTITIES***' => (int) $account->hasPermission('administer storage entities'),
  ];
}

/**
 * Implements hook_entity_base_field_info().
 */
function storage_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'storage' && \Drupal::hasService('rabbit_hole.entity_extender')) {
    return \Drupal::service('rabbit_hole.entity_extender')
      ->getRabbitHoleFields('storage');
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function storage_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if (isset($entity_form['#entity_type']) && $entity_form['#entity_type'] === 'storage') {
    /** @var \Drupal\storage\Entity\StorageInterface $storage */
    $storage = $entity_form['#entity'];
    $form_class = $storage->getEntityType()->getFormClass('default');
    $entity_form['#entity_builders']['apply_name_pattern'] = [
      $form_class,
      'applyNamePattern',
    ];
  }
}

/**
 * Implements hook_entity_type_build().
 */
function storage_entity_type_build(array &$entity_types) {
  if (!isset($entity_types['storage'])) {
    return;
  }
  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
  $entity_type = $entity_types['storage'];
  $module_handler = \Drupal::moduleHandler();

  if ($module_handler->moduleExists('entity')) {
    // Use contrib Entity API's query access handler.
    if (is_subclass_of($entity_type->getStorageClass(), SqlEntityStorageInterface::class)) {
      // Query access only works for SQL storages.
      $entity_type->setHandlerClass('query_access', 'Drupal\storage\QueryAccess\StorageQueryAccessHandler');
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for Site Studio compatibility.
 */
function storage_theme_suggestions_storage_alter(array &$suggestions, array &$variables) {
  // @todo Test if this can be moved into storage_theme_suggestions_storage().
  if (function_exists('cohesion_templates_suggestions')) {
    cohesion_templates_suggestions($suggestions, $variables['elements']['#storage'], $variables['elements']['#view_mode'], 'storage');
  }
}
